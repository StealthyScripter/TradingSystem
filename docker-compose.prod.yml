# docker-compose.prod.yml - Production Configuration

version: '3.8'

services:
  # PostgreSQL Database - Production Optimized
  postgres:
    image: postgres:15-alpine
    container_name: portfolio_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-portfolio_user} -d ${POSTGRES_DB:-portfolio_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Redis Cache - Production Optimized
  redis:
    image: redis:7-alpine
    container_name: portfolio_redis_prod
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_prod_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    command: redis-server /usr/local/etc/redis/redis.conf

  # FastAPI Backend - Production
  backend:
    build:
      context: ./flexpesa-ai
      dockerfile: Dockerfile
      target: production
    container_name: portfolio_backend_prod
    restart: always
    environment:
      # Environment
      ENVIRONMENT: production
      DEBUG: false

      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-portfolio_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-portfolio_db}

      # Security
      SECRET_KEY: ${SECRET_KEY}

      # Clerk Authentication
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY}
      CLERK_DOMAIN: ${CLERK_DOMAIN}

      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}

      # API Keys
      NEWS_API_KEY: ${NEWS_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}

      # Redis
      REDIS_URL: redis://redis:6379

      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-60}
      RATE_LIMIT_BURST: ${RATE_LIMIT_BURST:-100}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}

    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - portfolio_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: portfolio_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - portfolio_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Database Backup Service
  db_backup:
    image: postgres:15-alpine
    container_name: portfolio_backup_prod
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-portfolio_user}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - portfolio_network
    depends_on:
      - postgres
    command: /backup.sh
    profiles:
      - backup

  # Log Aggregator (Optional)
  logrotate:
    image: alpine:latest
    container_name: portfolio_logrotate_prod
    restart: always
    volumes:
      - ./logs:/logs
      - ./scripts/logrotate.conf:/etc/logrotate.conf:ro
    command: >
      sh -c "
        apk add --no-cache logrotate &&
        while true; do
          logrotate /etc/logrotate.conf
          sleep 86400
        done
      "
    profiles:
      - logging

networks:
  portfolio_network:
    driver: bridge
    name: portfolio_network_prod
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_prod_data:
    name: portfolio_postgres_prod_data
    driver: local
  redis_prod_data:
    name: portfolio_redis_prod_data
    driver: local

# Production deployment commands:
# docker-compose -f docker-compose.prod.yml up -d
# docker-compose -f docker-compose.prod.yml --profile backup run db_backup
# docker-compose -f docker-compose.prod.yml --profile logging up -d logrotate