# docker-compose.yml

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio_db}
      POSTGRES_USER: ${POSTGRES_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-portfolio_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-portfolio_user} -d ${POSTGRES_DB:-portfolio_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./flexpesa-ai
      dockerfile: Dockerfile
    container_name: portfolio_backend
    environment:
      # Port configuration from .env
      PORT: ${BACKEND_CONTAINER_PORT:-8000}
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-portfolio_user}:${POSTGRES_PASSWORD:-portfolio_password}@postgres:5432/${POSTGRES_DB:-portfolio_db}
      # App settings
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      # API Keys
      NEWS_API_KEY: ${NEWS_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://frontend:3000}
    ports:
      - "${DOCKER_BACKEND_PORT:-8080}:${BACKEND_CONTAINER_PORT:-8000}"
    volumes:
      - ./flexpesa-ai:/app
      - backend_data:/app/data
    networks:
      - portfolio_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:${BACKEND_CONTAINER_PORT:-8000}/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./flexpesa-client
      dockerfile: Dockerfile
    container_name: portfolio_frontend
    environment:
      # API URL for Docker environment
      NEXT_PUBLIC_API_URL: http://localhost:${DOCKER_BACKEND_PORT:-8080}/api/v1
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_CONTAINER_PORT:-3000}
    ports:
      - "${DOCKER_FRONTEND_PORT:-3000}:${BACKEND_CONTAINER_PORT:-3000}"
    volumes:
      - ./flexpesa-client:/app
      - /app/node_modules
      - /app/.next
    networks:
      - portfolio_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${BACKEND_CONTAINER_PORT:-3000}/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: portfolio_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

networks:
  portfolio_network:
    driver: bridge
    name: portfolio_network

volumes:
  postgres_data:
    name: portfolio_postgres_data
  backend_data:
    name: portfolio_backend_data
  redis_data:
    name: portfolio_redis_data